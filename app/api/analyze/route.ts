import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI, GoogleGenerativeAIError } from '@google/generative-ai';

// Validate environment variables at startup
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
if (!GOOGLE_API_KEY) {
  throw new Error('GOOGLE_API_KEY environment variable is not set');
}

export async function POST(req: NextRequest) {
  try {
    const { text } = await req.json();

    // Validate input
    if (!text || typeof text !== 'string' || text.trim().length === 0) {
      return NextResponse.json(
        { error: 'Invalid or empty text input' },
        { status: 400 }
      );
    }

    // Sanitize input (basic example, consider more robust sanitization)
    const sanitizedText = text.trim().slice(0, 10000); // Limit length to prevent abuse

    // Initialize Google Generative AI
    const genAI = new GoogleGenerativeAI(GOOGLE_API_KEY!);
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

    // Generate content
    const prompt = `Analyze the following text and provide a concise summary of its key points:\n\n${sanitizedText}`;
    const result = await model.generateContent(prompt);
    const analysis = result.response.text()?.trim() || 'No analysis generated by AI.';

    // Log success for debugging
    console.log('Text analysis successful:', { inputLength: sanitizedText.length, analysisLength: analysis.length });

    return NextResponse.json({ analysis });
  } catch (error) {
    // Handle specific Gemini errors
    if (error instanceof GoogleGenerativeAIError) {
      console.error('Gemini API error:', error.message);
      return NextResponse.json(
        { error: `Gemini API error: ${error.message}` },
        { status: 500 }
      );
    }

    // Handle other errors
    console.error('Error analyzing text with Gemini:', error);
    return NextResponse.json(
      { error: 'Failed to analyze text. Please try again later.' },
      { status: 500 }
    );
  }
}
